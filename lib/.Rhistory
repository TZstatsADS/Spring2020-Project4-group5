runApp('Desktop/shiny app')
runApp('Desktop/shiny app')
runApp('Desktop/ADS project 2 data')
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tibble)
library(DT)
library(tidyverse)
data1<- read.table("FamaFrench_mon_69_98.txt",header=T)
crspmon<-load("CRSPmon.RData")
crs<-as_tibble(CRSPmon*100)
data1_i<-data1[1:60,]
crs_i<-crs[1:60,]
table_i<-cbind(data1_i,crs_i)
model1<-lm(cbind(ge, ibm, mobil)-RF ~`Mkt.RF` + SMB + HML,data=table_i)
model1
# (ii)
data1_ii<-data1[301:360,]
crs_ii<-crs[301:360,]
table_ii<-cbind(data1_ii,crs_ii)
model2<-lm(cbind(ge, ibm, mobil)-RF ~`Mkt.RF` + SMB + HML,data=table_ii)
model2
data2<-read.csv("HW4_return.csv")
s<-scale(data2)
cov<-cov(s)
eigen<-eigen(cov)
max(eigen$values)/sum(eigen$values)
View(data2)
View(data2)
s
# (ii)
data1_ii<-data1[301:360,]
crs_ii<-crs[301:360,]
table_ii<-cbind(data1_ii,crs_ii)
model2<-lm(cbind(ge, ibm, mobil)-RF ~`Mkt.RF` + SMB + HML,data=table_ii)
model2
library(tidyverse)
library(itsmr)
data <- read_csv("strikes.tsm", col_names = FALSE)%>%as.matrix
mean(data)
acvf(data,1)
data[30,]
library(tidyverse)
library(itsmr)
data <- read_csv("/Users/zhaoziqin/Desktop/strikes.tsm", col_names = FALSE)%>%as.matrix
mean(data)
acvf(data,1)
data[30,]
library(tidyverse)
library(itsmr)
data <- read_csv("/Users/zhaoziqin/Desktop/strikes.tsm", col_names = FALSE)%>%as.matrix
mean(data)
acvf(data,1)
data[30,]
View(data)
View(data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(mvtnorm)
install.packages("mvtnorm")
library(tidyverse)
library(mvtnorm)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(mvtnorm)
cor5=0.6
T5=1
u5=v5=3.5/100
r5=4.1/100
FV5=10^6
c5=pmvnorm(lower = c(-Inf,-Inf), upper = c(qnorm(u5),qnorm(v5)),sigma = matrix( c(1,cor5,cor5,1),2,2))%>%as.numeric()
library(tidyverse)
library(mvtnorm)
cor<-0.6
u<-0.035
v<-0.035
r<-0.041
FV<-1000000
c<-pmvnorm(lower = c(-Inf,-Inf), upper = c(qnorm(u),qnorm(v)),sigma = matrix( c(1,cor,cor,1),2,2))%>%as.numeric()
FV*exp(-r*t)*(u+v-c)
FV5*exp(-r5*T5)*(u5+v5-c5)
library(tidyverse)
library(mvtnorm)
cor<-0.6
u<-0.035
v<-0.035
r<-0.041
T<-1
FV<-1000000
c<-pmvnorm(lower = c(-Inf,-Inf), upper = c(qnorm(u),qnorm(v)),sigma = matrix( c(1,cor,cor,1),2,2))%>%as.numeric()
FV*exp(-r*t)*(u+v-c)
library(tidyverse)
library(mvtnorm)
cor<-0.6
u<-0.035
v<-0.035
r<-0.041
t<-1
FV<-1000000
c<-pmvnorm(lower = c(-Inf,-Inf), upper = c(qnorm(u),qnorm(v)),sigma = matrix( c(1,cor,cor,1),2,2))%>%as.numeric()
FV*exp(-r*t)*(u+v-c)
FV*exp(-r*t)*(c)
FV5*exp(-r5*T5)*(c5)
P<-function(lambda,t) 1-exp(-lambda*t)
u1<-P(0.02,1)
v1<-P(0.01,1)
alpha<-2
c1<-exp(-((-log(u1))^alpha + (-log(v1))^alpha)^(1/alpha))
c1
C6<-function(u,v,alpha){
exp(-( (-log(u))^alpha + (-log(v))^alpha   )^(1/alpha))
}
P6<-function(lambda,t){1-exp(-lambda*t)}
UA6=P6(0.02,1)
VB6=P6(0.01,1)
c6=C6(UA6,VB6,2)
c6
u1+v1-c1
UA6+VB6-c6
FV_1<-1000000
r1<-0
FV7*exp(-r7*T7)*(C6(UA6,VB6,2))
FV_1*exp(-r1*t)*(c1)
FV7=10^6
r7=0
T7=1
FV7*exp(-r7*T7)*(C6(UA6,VB6,2))
FV7*exp(-r7*T7)*(C6(UA6,VB6,1))
alpha_new = 1
c2<-exp(-((-log(u1))^alpha_new + (-log(v1))^alpha_new)^(1/alpha_new))
FV_1*exp(-r1*t)*(c2)
library(tidyverse)
library(mvtnorm)
cor<-0.6
u<-0.035
v<-0.035
r<-0.041
t<-1
FV<-1000000
c<-pmvnorm(lower = c(-Inf,-Inf), upper = c(qnorm(u),qnorm(v)),
sigma = matrix( c(1,cor,cor,1),2,2))%>%
as.numeric()
#library(tidyverse)
library(mvtnorm)
cor<-0.6
u<-0.035
v<-0.035
r<-0.041
t<-1
FV<-1000000
c<-pmvnorm(lower = c(-Inf,-Inf), upper = c(qnorm(u),qnorm(v)),
sigma = matrix( c(1,cor,cor,1),2,2))
c<-as.numeric(c)
FV*exp(-r*t)*(u+v-c)
FV*exp(-r*t)*(c)
P<-function(lambda,t) 1-exp(-lambda*t)
u1<-P(0.02,1)
v1<-P(0.01,1)
alpha<-2
c1<-exp(-((-log(u1))^alpha + (-log(v1))^alpha)^(1/alpha))
c1
u1+v1-c1
FV_1<-1000000
r1<-0
FV_1*exp(-r1*t)*(c1)
alpha_new = 1
c2<-exp(-((-log(u1))^alpha_new + (-log(v1))^alpha_new)^(1/alpha_new))
FV_1*exp(-r1*t)*(c2)
reticulate::repl_python()
import numpy as np
import pandas as pd
knitr::opts_chunk$set(echo = TRUE)
packages.used=c("gbm", "tidyverse","caret")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(caret)
library(gbm)
library(tidyverse)
load("/Users/zhaoziqin/Desktop/project3/output/fiducial_pt_list.RData")
############ set up file path ###########
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
info <- read.csv("/Users/zhaoziqin/Desktop/project3/data/train_set/label.csv")
##### set up parameters，eg:cross-validation, K-fold，whether or not to do the train/test
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
n<-length(fiducial_pt_list)
# Test partial part
# n<-n*0.3
# index<-sample(1:length(fiducial_pt_list),n,replace=F)
# n_train <- round(n*(4/5), 0)
# train_idx <- sample(index, n_train, replace = F)
# test_idx <- setdiff(index,train_idx)
############拆分train test（通过train_idx）###########
n_train <- round(n*(4/5), 0)
train_idx <- sample(1:n, n_train, replace = F)
test_idx <- setdiff(1:n,train_idx)
source("/Users/zhaoziqin/Desktop/project3/lib/feature.R")
# dat_train to get all distances from two points from images in train_idx，total points (78*77=6006)
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
}
# data_test
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(fiducial_pt_list, test_idx))
}
# save(dat_train, file="../output/feature_train.RData")
# save(dat_test, file="../output/feature_test.RData")
data=dat_train[sample(1:2000,500,replace = F),]
n.tree= 100
shrinkage=0.05
inter.dep =1
cv.folds=3
# distribution="adaboost"    #some problem
distribution = "multinomial"
n1<-Sys.time()
# fit initial model
gbm1 <-
gbm(emotion_idx ~.,            # formula
data=data,                   # dataset
# var.monotone=c(0,0,0,0,0,0), # -1: monotone decrease,
#                              # +1: monotone increase,
#                              #  0: no monotone restrictions
distribution = "multinomial",   # see the help for other choices
n.trees=n.tree,              # number of trees
shrinkage=shrinkage,         # shrinkage or learning rate,
# 0.001 to 0.1 usually work
interaction.depth=inter.dep, # 1: additive model, 2: two-way interactions, etc.
bag.fraction = 0.5,          # subsampling fraction, 0.5 is probably best
train.fraction = 0.5,        # fraction of data for training,
# first train.fraction*N used for training
n.minobsinnode = 10,         # minimum total weight needed in each node
cv.folds = cv.folds,                # do 3-fold cross-validation
keep.data=TRUE,              # keep a copy of the dataset with the object
verbose=FALSE,               # don't print out progress
n.cores=1)                   # use only a single core (detecting #cores is
# error-prone, so avoided here)
n2<-Sys.time()-n1
save(gbm1,file="../output/baseline.RData")
save(gbm1,file="/Users/zhaoziqin/Desktop/project3/output/baseline.RData")
# # check performance using a 50% heldout test set
best.iter_test <- gbm.perf(gbm1,method="test")
# # check performance using 5-fold cross-validation
best.iter_cv <- gbm.perf(gbm1,method="cv")
# predict on the new data using "best" number of trees
# f.predict generally will be on the canonical scale (logit,log,etc.)
best.iter<-c(best.iter_test,best.iter_cv)
table<-NULL
for (i in best.iter){
pred = predict.gbm(object = gbm1,
newdata = dat_test,
n.trees = i,
type = "response")
labels = colnames(pred)[apply(pred, 1, which.max)]
# least squares error
result = data.frame(dat_test$emotion_idx, labels)
acc<-mean(dat_test$emotion_idx==labels)
table<-rbind(table,tibble(acc=acc))
}
# predict on the new data using "best" number of trees
# f.predict generally will be on the canonical scale (logit,log,etc.)
best.iter<-c(best.iter_test,best.iter_cv)
table<-NULL
for (i in best.iter){
pred = predict.gbm(object = gbm1,
newdata = dat_test,
n.trees = i,
type = "response")
labels = colnames(pred)[apply(pred, 1, which.max)]
# least squares error
result = data.frame(dat_test$emotion_idx, labels)
acc<-mean(dat_test$emotion_idx==labels)
table<-rbind(table,tibble(acc=acc))
}
table
best.iter_test
best.iter_cv
# # check performance using a 50% heldout test set
best.iter_test <- gbm.perf(gbm1,method="test")
# # check performance using 5-fold cross-validation
best.iter_cv <- gbm.perf(gbm1,method="cv")
load("~/Desktop/baseline.RData")
View(gbm1)
View(gbm1)
plot(x,2*(1-cos(12*x)))
x = seq(0.2*pi,0.001)
plot(x,2*(1-cos(12*x)))
x = seq(0.2*pi,0.001)
plot(x,2*(1-cos(12*x)),type='1')
x = seq(0.2*pi,0.001)
plot(x,2*(1-cos(12*x)),type='l')
x = seq(0.2*pi,0.001)
plot(x,2*(1-cos(12*x)),type='l')
x = seq(0.2*pi,0.001)
plot(x,2*(1-cos(12*x)),type='l')
x = seq(0,2*pi,0.001)
plot(x,2*(1-cos(12*x)),type='l')
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read.csv("../data/ml-latest-small/ratings.csv")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read.csv("../data/ml-latest-small/ratings.csv")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
data <- read.csv("../data/ml-latest-small/ratings.csv")
set.seed(0)
test_idx <- sample(1:nrow(data), round(nrow(data)/5, 0))
train_idx <- setdiff(1:nrow(data), test_idx)
data_train <- data[train_idx,]
data_test <- data[test_idx,]
U <- length(unique(data[1:5000,]$userId))
I <- length(unique(data[1:5000,]$movieId))
source("../lib/Matrix_Factorization.R")
result_summary_sgd_5000 <- array(NA, dim = c(nrow(f_l), 10, 4))
f_list <- seq(10, 20, 10)
l_list <- seq(-2, -1, 1)
f_l <- expand.grid(f_list, l_list)
result_summary_sgd_5000 <- array(NA, dim = c(nrow(f_l), 10, 4))
run_time <- system.time(for(i in 1:nrow(f_l)){
par <- paste("f = ", f_l[i,1], ", lambda = ", 10^f_l[i,2])
cat(par, "\n")
current_result <- cv.function(data[1:5000,], K = 5, f = f_l[i,1], lambda = 10^f_l[i,2])
result_summary_sgd_5000[,,i] <- matrix(unlist(current_result), ncol = 10, byrow = T)
print(result_summary_sgd_5000)
})
source("../lib/cross_validation.R")
f_list <- seq(10, 20, 10)
l_list <- seq(-2, -1, 1)
f_l <- expand.grid(f_list, l_list)
result_summary_sgd_5000 <- array(NA, dim = c(nrow(f_l), 10, 4))
run_time <- system.time(for(i in 1:nrow(f_l)){
par <- paste("f = ", f_l[i,1], ", lambda = ", 10^f_l[i,2])
cat(par, "\n")
current_result <- cv.function(data[1:5000,], K = 5, f = f_l[i,1], lambda = 10^f_l[i,2])
result_summary_sgd_5000[,,i] <- matrix(unlist(current_result), ncol = 10, byrow = T)
print(result_summary_sgd_5000)
})
source("../lib/cross_validation_r1+r2.R")
source("../lib/cross_validation_R1+R2.R")
source("../lib/cross_validation_A1+R1+R2.R")
source("../lib/Matrix_Factorization_A1+R1+R2.R")
f_list <- seq(10, 20, 10)
l_list <- seq(-2, -1, 1)
f_l <- expand.grid(f_list, l_list)
result_summary_r12 <- array(NA, dim = c(nrow(f_l), 10, 4))
run_time <- system.time(for(i in 1:nrow(f_l)){
par <- paste("f = ", f_l[i,1], ", lambda = ", 10^f_l[i,2])
cat(par, "\n")
current_result <- cv.function.r12(data[1:5000,], K = 5, f = f_l[i,1], lambda = 10^f_l[i,2])
result_summary_r12[,,i] <- matrix(unlist(current_result), ncol = 10, byrow = T)
print(result_summary_r12)
})
save(result_summary_r12, file = "../output/rmseR12.Rdata")
rmse <- data.frame(rbind(t(result_summary_r12[1,,]), t(result_summary_r12[2,,])), train_test = rep(c("Train", "Test"), each = 4), par = rep(paste("f = ", f_l[,1], ", lambda = ", 10^f_l[,2]), times = 2)) %>% gather("epoch", "RMSE", -train_test, -par)
rmse$epoch <- as.numeric(gsub("X", "", rmse$epoch))
rmse %>% ggplot(aes(x = epoch, y = RMSE, col = train_test)) + geom_point() + facet_grid(~par)
shiny::runApp('Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/cbcb4f941881066de49571acc5cc5a21/Message/MessageTemp/40ad518cd67b295a865ac907bbc59850/File')
runApp('Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/cbcb4f941881066de49571acc5cc5a21/Message/MessageTemp/40ad518cd67b295a865ac907bbc59850/File')
runApp('Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/cbcb4f941881066de49571acc5cc5a21/Message/MessageTemp/40ad518cd67b295a865ac907bbc59850/File')
runApp('Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/cbcb4f941881066de49571acc5cc5a21/Message/MessageTemp/40ad518cd67b295a865ac907bbc59850/File')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
image_write(image, "Users/zhaoziqin/Desktop/out.gif")
install.packages("magick")
library(magick)
p = gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp, size = pop, color = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_color_manual(values = country_colors) +
scale_size(range = c(2,12)) +
scale_x_log10() +
labs(title = 'Year:{frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
image <- animate(p)
image_write(image, "Users/zhaoziqin/Desktop/out.gif")
library(magick)
p = gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp, size = pop, color = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_color_manual(values = country_colors) +
scale_size(range = c(2,12)) +
scale_x_log10() +
labs(title = 'Year:{frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
image_write(animate(p), "Users/zhaoziqin/Desktop/out.gif")
library(magick)
library(gapminder)
library(ggplot2)
p = gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp, size = pop, color = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_color_manual(values = country_colors) +
scale_size(range = c(2,12)) +
scale_x_log10() +
labs(title = 'Year:{frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
image_write(animate(p), "Users/zhaoziqin/Desktop/out.gif")
p = gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp, size = pop, color = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_color_manual(values = country_colors) +
scale_size(range = c(2,12)) +
scale_x_log10() +
labs(title = 'Year:{frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
im<-animate(p)
image_write(im, "Users/zhaoziqin/Desktop/out.gif")
image<-animate(p)
image
p
library(installr)
updateR()
install.packages("installr")
runApp('Desktop')
version
library(magick)
library(gapminder)
library(ggplot2)
p = gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp, size = pop, color = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_color_manual(values = country_colors) +
scale_size(range = c(2,12)) +
scale_x_log10() +
labs(title = 'Year:{frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
image<-animate(p)
image_write(image, "Users/zhaoziqin/Desktop/out.gif")
install.packages("ggplot2")
install.packages("gapminder")
install.packages("magick")
library(magick)
library(gapminder)
library(ggplot2)
p = gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp, size = pop, color = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_color_manual(values = country_colors) +
scale_size(range = c(2,12)) +
scale_x_log10() +
labs(title = 'Year:{frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
image<-animate(p)
image_write(image, "Users/zhaoziqin/Desktop/out.gif")
install.packages("transition_time")
shiny::runApp('Desktop')
install.packages("shiny")
install.packages("gganimate")
shiny::runApp('Desktop')
install.packages("tidyverse")
install.packages("tidyr")
install.packages("dplyr")
shiny::runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
library(magick)
library(gapminder)
library(ggplot2)
p = gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp, size = pop, color = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_color_manual(values = country_colors) +
scale_size(range = c(2,12)) +
scale_x_log10() +
labs(title = 'Year:{frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
image<-animate(p)
image_write(image, "/Users/zhaoziqin/Desktop/out.gif")
library(magick)
library(gapminder)
library(ggplot2)
p = gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp, size = pop, color = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_color_manual(values = country_colors) +
scale_size(range = c(2,12)) +
scale_x_log10() +
labs(title = 'Year:{frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
image<-animate(p)
image_write(image, "/Users/zhaoziqin/Desktop/output.gif")
